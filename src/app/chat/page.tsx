'use client';

import { useChat } from '@ai-sdk/react';
import { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';

import ChatNavbar from '@/components/chatComponents/ChatNavbar';
import ChatInput from '@/components/chatComponents/ChatInput';
import MessageBubble from '@/components/chatComponents/MessageBubble';
import { SparklesText } from '@/components/magicui/sparkles-text'; 
import { toast } from "sonner";
import { MoodChips } from '@/components/chatComponents/MoodChips';

export default function ChatPage() {
  const bottomRef = useRef<HTMLDivElement | null>(null);
  const [mood, setMood] = useState('happy');
  const [isPremium, setIsPremium] = useState(false);

useEffect(() => {
  const checkPremiumStatus = async () => {
    try {
      const res = await fetch('/api/check-subscription');
      const data = await res.json();
      if (data.isPremium) {
        setIsPremium(true);
        toast.success('ðŸŽ‰ You have successfully purchased the premium section. Voice AI is now enabled!');
      }
    } catch (err) {
      console.error('Failed to check subscription:', err);
    }
  };

  checkPremiumStatus();
}, []);


  const {
    messages,
    input,
    handleInputChange,
    handleSubmit: baseHandleSubmit,
    isLoading
  } = useChat({
    api: '/api/generate',
    body: { mood }
  });

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    baseHandleSubmit(e, { body: { mood } });
  };

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="relative min-h-screen bg-black text-white overflow-hidden">
      {/* Background Effect */}
      <div className="absolute inset-0 z-0 flex items-center justify-center pointer-events-none">
        <SparklesText className="text-center text-4xl font-bold opacity-20">
          Let&lsquo;s Chat!
        </SparklesText>
      </div>

      {/* Foreground Content */}
      <div className="relative z-10 flex flex-col h-screen">
        <ChatNavbar />

        {/* ðŸ’¡ Mood Selector */}
        <div className="px-4 pt-2 pb-1">
          <p className="text-sm text-white/70 mb-1">ðŸŽ­ Set your mood</p>
          <MoodChips selectedMood={mood} setSelectedMood={setMood} />
        </div>

        <div className="flex-1 overflow-y-auto px-4 md:px-8 py-4 space-y-4">
          {messages.map((m, i) => {
            if (m.role === 'data' && 'type' in m && m.type === 'image') {
              return (
                <motion.div
                  key={m.id || `image-${i}`}
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.4, delay: i * 0.05 }}
                >
                  <div className="rounded-xl overflow-hidden shadow-lg border border-white/10 bg-white/5 p-2">
                  { 'base64' in m ? (
                    <Image
                      src={m.base64 as string}
                      alt="Generated AI"
                      width={512}
                      height={512}
                      className="w-full h-auto object-cover rounded-lg"
                      unoptimized
                    />
                  ) : (
                    <p className="text-center text-white">Image generation failed</p>
                  )}
                    <p className="text-xs text-white/60 text-center mt-1">Generated by Gemini ðŸ”®</p>
                  </div>
                </motion.div>
              );
            }

            if (['user', 'assistant', 'system'].includes(m.role)) {
              return (
                <motion.div
                  key={m.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: i * 0.05 }}
                >
                  <MessageBubble role={m.role as 'user' | 'assistant' | 'system'} content={m.content} />
                </motion.div>
              );
            }

            return null;
          })}
          <div ref={bottomRef} />
        </div>

        <div className="p-4 bg-gradient-to-t from-black/80 via-black/60 to-transparent backdrop-blur-lg border-t border-white/10">
          <ChatInput
            input={input}
            handleInputChange={handleInputChange}
            handleSubmit={handleSubmit}
            isLoading={isLoading}
            isPremium={isPremium}
          />
        </div>
      </div>
    </div>
  );
}
